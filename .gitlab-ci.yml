---
## PRO TIP : Test your modifications locally with:
## $ gitlab-ci-multi-runner exec docker {name_of_the_job}


variables:
  PGDATA: /var/lib/postgresql/data
  PGUSER: postgres
  EXTDIR: /usr/share/postgresql/13/extension/
  PSQL: psql -v ON_ERROR_STOP=1
  POSTGRES_DB: nice_marmot
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: plop
  PGPASSWORD: CHANGEME
  SAST_EXCLUDED_PATHS: '_venv, docs/howto/_venv'
  GIT_SUBMODULE_STRATEGY: recursive
  PROJECT_API: "$CI_API_V4_URL/projects/$CI_PROJECT_ID"
  DATA_ZIP_API_URL: "$PROJECT_API/packages/generic/data/$CI_COMMIT_REF_NAME"


stages:
  - lint
  - build
  - test
  - pack
  - deploy
  - release

image: postgres:13

include:
  ## Default PG version is ALWAYS built and tested
  - local: ci/build_and_test_pgver.yml
    inputs:
      always: 'yes'   # this is a string not a boolean
      pgver: pg13
  ## Other PG versions are built and tested only on the `main` branch
  - local: ci/build_and_test_pgver.yml
    inputs:
      pgver: pg12
  - local: ci/build_and_test_pgver.yml
    inputs:
      pgver: pg14
  - local: ci/build_and_test_pgver.yml
    inputs:
      pgver: pg15
  - local: ci/build_and_test_pgver.yml
    inputs:
      pgver: pg16
  ## automatic SAST from Gitlab.com
  - template: Security/SAST.gitlab-ci.yml

##
## L I N T
##

lint-bash:
  stage: lint
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends shellcheck
    - shellcheck bin/pg_dump_anon.sh
    - shellcheck docker/anon.sh

lint-markdown:
  stage: lint
  image: ruby:alpine
  script:
    - gem install mdl
    - mdl docs/*.md *.md

lint-py:
  stage: lint
  image: python:3.7
  script:
    - pip3 install flake8
    - flake8 python/*.py

lint-go:
  stage: lint
  image: golang:alpine
  script:
    - apk add --no-cache gcc musl-dev
    - cd ./pg_dump_anon/
    - go mod download github.com/lib/pq
    - go vet main.go

##
## B U I L D
##

blackbox:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  script:
    - docker build -t blackbox . --file docker/Dockerfile
    - mkdir results
    - cat tests/sql/blackbox.sql |
        docker run --rm -i blackbox /anon.sh  > results/blackbox.out
    # we remove comments because pg_dump ouputs the PG version and we don't want
    # this test to break every time a new minor version is released
    - sed -i 's/^--.*$//' results/blackbox.out
    - diff tests/expected/blackbox.out results/blackbox.out
  when: manual  # TODO: restore this when the Rust extension is ready

how-to:
  image:
    name: dalibo/pandocker:latest
    entrypoint: [""]
  stage: build
  script:
    - cd docs/how-to
    - ./init_postgres.sh
    - export PGUSER=paul
    - export PGDATABASE=boutique
    - export PGPASSWORD=CHANGEME
    - make how-to
  # when: manual
  artifacts:
    paths:
      - docs/how-to
    expire_in: 1 day


# We need to launch manually the instance because the entrypoint is skipped.
.init_PG_instance: &init_PG_instance
  before_script:
    - mkdir -p $PGDATA
    - mkdir -p $EXTDIR
    - chown postgres $PGDATA
    - gosu postgres initdb
    - gosu postgres pg_ctl start

## basic user sories
demo:
  <<: *init_PG_instance
  stage: test
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends
        make gcc postgresql-server-dev-13 postgresql-contrib-13  pgxnclient
    - make extension
    - make install
    - psql -c "ALTER SYSTEM SET session_preload_libraries = 'anon'"
    - psql -c "SELECT pg_reload_conf();"
    - make demo
  when: manual
  artifacts:
    paths:
      - demo/*.out
    expire_in: 1 day

##
## D E P L O Y
##

docker_latest:
  stage: deploy
  image: docker:24.0
  services:
    - docker:24.0-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/dalibo/postgresql_anonymizer:latest .
                   --file docker/Dockerfile
    - docker push $CI_REGISTRY/dalibo/postgresql_anonymizer:latest
  only:
    - master@dalibo/postgresql_anonymizer

docker_stable:
  stage: deploy
  image: docker:24.0
  services:
    - docker:24.0-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/dalibo/postgresql_anonymizer:stable .
        --file docker/Dockerfile
    - docker push $CI_REGISTRY/dalibo/postgresql_anonymizer:stable
  only:
    - stable@dalibo/postgresql_anonymizer

pgxn:
  stage: deploy
  image: alpine
  script:
    - apk add -U make git zip
    - make pgxn
  artifacts:
    paths:
      - anon*
      - _pgxn/
    expire_in: 1 day
  only:
    - master

data_zip:
  stage: deploy
  image: alpine
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - apk add -U make git zip curl
    - make data_zip
    - echo $DATA_ZIP_API_URL
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN"
            --upload-file _build/postgresql_anonymizer_data_en_US.zip
            "$DATA_ZIP_API_URL/postgresql_anonymizer_data_en_US.zip"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN"
            --upload-file _build/postgresql_anonymizer_data_fr_FR.zip
            "$DATA_ZIP_API_URL/postgresql_anonymizer_data_fr_FR.zip"'
  artifacts:
    paths:
      - _build

pages:
  stage: deploy
  image: alpine
  script:
    - apk add tree
    - mkdir public
    - cp docs/how-to/_build/* public
    - tree ./public -H '.' -T "$title" -I "" --noreport --charset utf-8
        > ./public/index.html
  artifacts:
    paths:
      - public
  only:
    variables:
      # git push -o ci.variable="CI_PUBLISH_PAGES=1"
      - $CI_COMMIT_BRANCH == 'master' || $CI_PUBLISH_PAGES

##
## R E L E A S E
##

release_anon:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'English dataset'
          url: '$DATA_ZIP_API_URL/postgresql_anonymizer_data_en_US.zip'
          link_type: 'package'
          filepath: 'postgresql_anonymizer_data_en_US.zip'
        - name: 'French dataset'
          url: '$DATA_ZIP_API_URL/postgresql_anonymizer_data_fr_FR.zip'
          link_type: 'package'
          filepath: 'postgresql_anonymizer_data_fr_FR.zip'

release_pg_dump_anon:
  stage: release
  image:
    name: goreleaser/goreleaser
    entrypoint: ['']
  only:
    - tags
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
  script:
    - cd pg_dump_anon
    - goreleaser release --rm-dist

release_docker:
  stage: release
  image: docker:24.0
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  services:
    - docker:24.0-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/dalibo/postgresql_anonymizer:$CI_COMMIT_TAG .
                   --file docker/Dockerfile
    - docker push $CI_REGISTRY/dalibo/postgresql_anonymizer:$CI_COMMIT_TAG
